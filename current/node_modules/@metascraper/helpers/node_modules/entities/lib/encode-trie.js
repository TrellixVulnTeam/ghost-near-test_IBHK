"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeHTMLTrieRe = exports.getCodePoint = void 0;
var encode_html_js_1 = __importDefault(require("./generated/encode-html.js"));
function isHighSurrugate(c) {
    return (c & 64512 /* Mask */) === 55296 /* High */;
}
// For compatibility with node < 4, we wrap `codePointAt`
exports.getCodePoint = 
// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
String.prototype.codePointAt != null
    ? function (str, index) { return str.codePointAt(index); }
    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        function (c, index) {
            return isHighSurrugate(c.charCodeAt(index))
                ? (c.charCodeAt(index) - 55296 /* High */) * 0x400 +
                    c.charCodeAt(index + 1) -
                    0xdc00 +
                    0x10000
                : c.charCodeAt(index);
        };
function encodeHTMLTrieRe(regExp, str) {
    var _a;
    var ret = "";
    var lastIdx = 0;
    var match;
    while ((match = regExp.exec(str)) !== null) {
        var i = match.index;
        var char = str.charCodeAt(i);
        var next = encode_html_js_1.default.get(char);
        if (next != null) {
            if (typeof next !== "string") {
                // We are in a branch. Try to match the next char.
                if (i + 1 < str.length) {
                    var value = typeof next.n === "number"
                        ? next.n === str.charCodeAt(i + 1)
                            ? next.o
                            : null
                        : next.n.get(str.charCodeAt(i + 1));
                    if (value) {
                        ret += str.substring(lastIdx, i) + value;
                        lastIdx = regExp.lastIndex += 1;
                        continue;
                    }
                }
                // If we have a character without a value, use a numeric entitiy.
                next = (_a = next.v) !== null && _a !== void 0 ? _a : "&#x".concat(char.toString(16), ";");
            }
            ret += str.substring(lastIdx, i) + next;
            lastIdx = i + 1;
        }
        else {
            ret += "".concat(str.substring(lastIdx, i), "&#x").concat((0, exports.getCodePoint)(str, i).toString(16), ";");
            // Increase by 1 if we have a surrogate pair
            lastIdx = regExp.lastIndex += Number(isHighSurrugate(char));
        }
    }
    return ret + str.substr(lastIdx);
}
exports.encodeHTMLTrieRe = encodeHTMLTrieRe;
//# sourceMappingURL=encode-trie.js.map